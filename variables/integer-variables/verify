#!/opt/pwn.college/python
import sys
sys.path.append('/challenge')

def print_flag():
	try:
		with open("/flag", "r") as f:
			print(f.read())
	except FileNotFoundError:
		print("Error: Flag file not found.")

# Add your imports and other code below here
from paceCParser.parser import *
import re
import os

def check_c_file(current_dir, filename):
    filepath = os.path.join(current_dir, filename)
    if not os.path.isfile(filepath):
        return False, "Unable to find C file named {}. Did you name it something else?".format(filename)

    return True, ""

def check_libraries(file_contents):
    if file_contents.split('\n')[0] != '#include <stdio.h>':
        return False, "Missing 'stdio.h' library."

    return True, ""

def check_print_statement(function_contents):
    expected = 'printf("My age is: %d\\n", age);'
    if expected in function_contents:
        return True, ""    
    else:
        return False, "Missing `printf()` statement to print age."

def check_output(filepath):
    program_output = run_program(filepath)
    output_re = re.compile(r'My age is: \d+\n') 
    if not output_re.search(program_output):
        return False, "Program output does not match expected output."

    return True, ""

def check_variables(function_contents):
    if len(function_contents) > 3:
        return False, "Incorrect number of statements."

    for statement in function_contents:
        if isinstance(statement, Variable):
            if statement.data_type == 'int':
                if statement.name == 'age':
                    return True, ""
                else:
                    return False, "Variable is not named as expected."
            else:
                return False, "Variable is not the correct data type."


if __name__ == '__main__':
    current_dir = os.getcwd()

    filename = sys.argv[1]

    passed, error_msg = check_c_file(current_dir, filename)
    if not passed:
        print(f'{RED_TEXT_CODE}Incorrect{RESET_TEXT_CODE}: {error_msg}')
        sys.exit(1)

    filepath = os.path.join(current_dir, filename)
    if not verify_initial_checks(filepath):
        sys.exit(1)

    file_contents = get_file_contents(filepath)
    main_func = format_func_declar('int main()')
    function_contents = get_function_contents_v2(file_contents, main_func)

    verification_funcs = [
        check_libraries(file_contents),
        check_variables(function_contents),
        check_print_statement(function_contents),
        check_output(filepath)
    ]

    for func in verification_funcs:
        passed, error_msg = func
        if not passed:
            print(f'{RED_TEXT_CODE}Incorrect{RESET_TEXT_CODE}: {error_msg}')
            sys.exit(1)

    print(f'{GREEN_TEXT_CODE}Correct{RESET_TEXT_CODE}')
    print("Congragulations! You have passed this challenge! Here is your flag:")
    print_flag()
