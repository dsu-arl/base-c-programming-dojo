#!/usr/bin/exec-suid -- /usr/bin/python3.12 -I
import sys
sys.path.append('/challenge')

def print_flag():
    try:
        with open("/flag", "r") as f:
            print(f.read())
    except FileNotFoundError:
        print("Error: Flag file not found.")

# Add your imports and other code below here
from paceCParser.data_classes import Variable
from paceCParser.parser import RED_TEXT_CODE, RESET_TEXT_CODE, GREEN_TEXT_CODE, verify_initial_checks, parse_file, retrieve_function_body, compile_program, run_program
import os


def check_c_file(current_dir, filename):
    filepath = os.path.join(current_dir, filename)
    if not os.path.isfile(filepath):
        return False, "Unable to find C file named {}. Did you name it something else?".format(filename)

    return True, ""


def check_libraries(file_contents):
    if '#include <stdio.h>' not in file_contents:
        return False, "Missing 'stdio.h' library."

    return True, ""


def check_variable(contents):
    # verifies an integer named 'num' was declared and initialized from user input with a prompt
    if Variable(data_type='int', name='num', value=None) not in contents:
        return False, "Unable to find integer variable named 'num'."
    
    correct_prompt = 'printf("Enter a number: ");'
    if correct_prompt not in contents:
        return False, "Unable to find prompt for user input or prompt string doesn't match expected prompt."
    
    if 'scanf("%d", &num);' not in contents and 'scanf("%d",&num);' not in contents:
        return False, "Unable to find scanf() statement for num."
    
    return True, ''


def check_increment(contents):
    if 'num++;' not in contents:
        return False, "Unable to find increment operation on 'num' using '++'."

    correct_print1 = 'printf("After increment: %d\\n",num);'
    correct_print2 = 'printf("After increment: %d\\n", num);'
    if correct_print1 not in contents and correct_print2 not in contents:
        return False, "Unable to find print statement showing increment operation after using '++' or printed text doesn't match instructions."

    return True, ''


def check_adding(contents):
    valid_options = ['num += 10;', 'num+=10;']
    if not any(value in contents for value in valid_options):
        return False, "Unable to find adding operation on 'num' using '+='."

    correct_print1 = 'printf("After adding 10: %d\\n",num);'
    correct_print2 = 'printf("After adding 10: %d\\n", num);'
    if correct_print1 not in contents and correct_print2 not in contents:
        return False, "Unable to find print statement showing adding operation after using '+=' or printed text doesn't match instructions."

    return True, ''


def check_multiply(contents):
    valid_options = ['num *= 2;', 'num*=2;']
    if not any(value in contents for value in valid_options):
        return False, "Unable to find multiplication operation on 'num' using '*='."

    correct_print1 = 'printf("After multiplying by 2: %d\\n",num);'
    correct_print2 = 'printf("After multiplying by 2: %d\\n", num);'
    if correct_print1 not in contents and correct_print2 not in contents:
        return False, "Unable to find print statement showing multiplication operation after using '*=' or printed text doesn't match instructions."

    return True, ''


def check_decrement(contents):
    if 'num--;' not in contents:
        return False, "Unable to find decrement operation on 'num' using '--'."

    correct_print1 = 'printf("After decrement: %d\\n",num);'
    correct_print2 = 'printf("After decrement: %d\\n", num);'
    if correct_print1 not in contents and correct_print2 not in contents:
        return False, "Unable to find print statement showing decrement operation after using '--' or printed text doesn't match instructions."

    return True, ''


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: /challenge/verify <user_file>.c')
        sys.exit(1)

    current_dir = os.getcwd()
    filename = sys.argv[1]

    passed, error_msg = check_c_file(current_dir, filename)
    if not passed:
        print(f'{RED_TEXT_CODE}Incorrect{RESET_TEXT_CODE}: {error_msg}')
        sys.exit(1)

    filepath = os.path.join(current_dir, filename)
    if not verify_initial_checks(filepath):
        sys.exit(1)

    file_contents = parse_file(filepath)
    main_function = {'function_name': 'main', 'return_type': 'int', 'parameters': []}
    main_function_contents = retrieve_function_body(file_contents, **main_function)

    verification_funcs = [
        check_libraries(file_contents),
        check_variable(main_function_contents),
        check_increment(main_function_contents),
        check_adding(main_function_contents),
        check_multiply(main_function_contents),
        check_decrement(main_function_contents)
    ]

    for func in verification_funcs:
        passed, error_msg = func
        if not passed:
            print(f'{RED_TEXT_CODE}Incorrect{RESET_TEXT_CODE}: {error_msg}')
            sys.exit(1)

    print(f'{GREEN_TEXT_CODE}Correct{RESET_TEXT_CODE}')
    print("Congragulations! You have passed this challenge! Here is your flag:")
    print_flag()