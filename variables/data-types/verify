#!/opt/pwn.college/python
import sys
sys.path.append('/challenge')

def print_flag():
	try:
		with open("/flag", "r") as f:
			print(f.read())
	except FileNotFoundError:
		print("Error: Flag file not found.")

# Add your imports and other code below here
from paceCParser.parser import *
import os
import re

CHAR_VAR_NAME = ""
INT_VAR_NAME = ""
FLOAT_VAR_NAME = ""

def check_c_file(current_dir, filename):
    filepath = os.path.join(current_dir, filename)
    if not os.path.isfile(filepath):
        return False, "Unable to find C file named {}. Did you name it something else?".format(filename)

    return True, ""

def check_libraries(file_contents):
    if file_contents.split('\n')[0] != '#include <stdio.h>':
        return False, "Missing 'stdio.h' library."
    
    return True, ""

def check_variables(function_contents):
    global INT_VAR_NAME
    global FLOAT_VAR_NAME
    global CHAR_VAR_NAME

    if len(function_contents) > 7:
        return False, "Incorrect number of statements."

    variables = [v for v in function_contents if not isinstance(v, str)]

    for variable in variables:
        if variable.data_type not in ["int", "float", "char"]:
            return False, "{} variable is not of an expected data type, got {} expecting one of int, float, char.".format(variable.name, variable.data_type)

        if variable.data_type == "int":
            INT_VAR_NAME = variable.name

        if variable.data_type == "float":
            FLOAT_VAR_NAME = variable.name

        if variable.data_type == "char":
            CHAR_VAR_NAME = variable.name

    return True, ""

def check_print_statements(function_contents):

    print_statements = [s for s in function_contents if isinstance(s, str) and "printf" in s]

    if len(print_statements) != 3:
        return False, "Incorrect number of print statements."
 
    expected_print_statements = [
        f'printf("My age is: %d\\n", {INT_VAR_NAME});',
        f'printf("My first initial is: %c\\n", {CHAR_VAR_NAME});', 
        f'printf("My GPA is: %f\\n", {FLOAT_VAR_NAME});'
    ]

    for statement in print_statements:
        if statement in expected_print_statements:
            continue
        else:
            return False, "Print Statement: {}, does not match expected.".format(statement)


    return True, ""

def check_output(filepath):
    program_output = run_program(filepath)
    age_re = re.compile(r'My age is: \d+\n')
    initial_re = re.compile(r'My first initial is: \w{1}\n')
    gpa_re = re.compile(r'My GPA is: \d{1}.\d+\n')
    
    if not age_re.search(program_output):
        return False, "Program does not output age as expected."

    if not initial_re.search(program_output):
        return False, "Program does not output initial as expected."

    if not gpa_re.search(program_output):
        return False, "Program does not output GPA as expected."

    return True, ""


if __name__ == '__main__':
    current_dir = os.getcwd()

    filename = sys.argv[1]

    passed, error_msg = check_c_file(current_dir, filename)
    if not passed:
        print(f'{RED_TEXT_CODE}Incorrect{RESET_TEXT_CODE}: {error_msg}')
        sys.exit(1)

    filepath = os.path.join(current_dir, filename)
    if not verify_initial_checks(filepath):
        sys.exit(1)

    file_contents = get_file_contents(filepath)
    main_func = format_func_declar('int main()')
    function_contents = get_function_contents_v2(file_contents, main_func)

    verification_funcs = [
        check_libraries(file_contents),
        check_variables(function_contents),
        check_print_statements(function_contents),
        check_output(filepath)
    ]

    for func in verification_funcs:
        passed, error_msg = func
        if not passed:
            print(f'{RED_TEXT_CODE}Incorrect{RESET_TEXT_CODE}: {error_msg}')
            sys.exit(1)

    print(f'{GREEN_TEXT_CODE}Correct{RESET_TEXT_CODE}')
    print("Congragulations! You have passed this challenge! Here is your flag:")
    print_flag()

